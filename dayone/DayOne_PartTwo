package com.example.dayone;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.HashMap;

public class DayOne_PartTwo {
	
	public static void main(String[] args) {

		Path inputPath = Paths.get("%directory%");
		List<Integer> list = new ArrayList<>();
		List<Integer> max = new ArrayList<>(Arrays.asList(0, 0, 0));
		int total = 0;
		int i = 0;
		HashMap<Integer, Integer> elves = new HashMap<Integer, Integer>();
		
		int initialVal = 0;
		try {
			BufferedReader reader = Files.newBufferedReader(inputPath);
			String line = reader.readLine();
			
			while (line != null) {

				i += 1;
				
				//TODO: last number in input is not being read because there is no newline
				// line.isEmpty does not ammend
				// line != null does not ammend either because line no longer exists at last iteration of while loop?
				
				if (line.isBlank()) {
					
					System.out.println("empty line");
					
					// for list of values in list, sum together and save to initialVal
					for (int listVal : list)
						initialVal += listVal;
					
					// set total set of vals from elf to hashmap
					elves.put(i, initialVal);
					
					// clear list of vals
					list.clear();
					initialVal = 0;
				}
				else {
					list.add(Integer.valueOf(line));
				}
				// read next line
				line = reader.readLine();
			}
			// while loop finished, add up last map
			// not sure how to fix this java i/o issue currently
			System.out.println("last value in file");
			for (int listVal : list)
				initialVal += listVal;
			
			// set total val from elf to hashmap
			elves.put(i, initialVal);
			
			// clear list of vals
			list.clear();
			initialVal = 0;
			// close file
			reader.close();
		} catch (IOException e) {
			e.printStackTrace();
		}	
		
		System.out.println("Top three elves with max calories are: ");
		// determine top three elves 
		// if val from key is greater than one or all elements in max[j], add to max
		elves.forEach((key, value) -> {		
			for(int j = 0; j < max.size(); j++) {
				
				if (value > max.get(j)) {
					max.set(j, value);
					// sorts max by lowest to smallest
					Collections.sort(max);
					break;
				}
			}	
		});
			
		System.out.println(max);
		
		for (int k : max)
			total += k;
		// vals should be 
		// 68177, 68218, 68442
		// total should be 204837
		System.out.println(total);
	}
}
